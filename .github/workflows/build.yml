name: Build and Release Zed

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: zed-linux-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: zed-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: zed-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: zed-windows-x64

    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        target: ${{ matrix.target }}
        toolchain: stable

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Package artifacts
      run: |
        # 根据不同平台打包构建产物
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          mkdir -p release
          cp target/${{ matrix.target }}/release/zed.exe release/
          cd release && zip -r ../${{ matrix.artifact_name }}.zip . && cd ..
        else
          mkdir -p release
          cp target/${{ matrix.target }}/release/zed release/
          tar -czf ${{ matrix.artifact_name }}.tar.gz -C release .
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}.*

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List files
      run: ls -R artifacts

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      with:
        tag_name: build-${{ github.run_number }}
        release_name: Build ${{ github.run_number }}
        draft: false
        prerelease: true

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ matrix.artifact_name }}/${{ matrix.artifact_name }}.tar.gz
        asset_name: ${{ matrix.artifact_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/zed-windows-x64/zed-windows-x64.zip
        asset_name: zed-windows-x64.zip
        asset_content_type: application/zip
